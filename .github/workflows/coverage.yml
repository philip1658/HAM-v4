name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: |
        brew update
        brew install cmake ninja lcov gcovr codecov-cli

    - name: Cache JUCE
      uses: actions/cache@v4
      with:
        path: JUCE
        key: ${{ runner.os }}-juce-8.0.4
        restore-keys: |
          ${{ runner.os }}-juce-

    - name: Download JUCE if not cached
      run: |
        if [ ! -d "JUCE" ]; then
          git clone --depth 1 --branch 8.0.4 https://github.com/juce-framework/JUCE.git
        fi

    - name: Configure CMake
      run: |
        mkdir -p build-coverage
        cd build-coverage
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DHAM_ENABLE_COVERAGE=ON \
          -DHAM_BUILD_TESTS=ON \
          -DCMAKE_OSX_ARCHITECTURES=arm64

    - name: Build with coverage
      run: |
        cd build-coverage
        ninja -j4

    - name: Run tests
      run: |
        cd build-coverage
        ctest --output-on-failure --verbose --timeout 300

    - name: Generate coverage reports
      run: |
        cd build-coverage
        
        # Generate lcov report
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/JUCE/*' '*/Tests/*' '*/Tools/*' '*/build*/*' --output-file coverage_filtered.info
        
        # Generate gcovr XML for codecov
        gcovr --xml-pretty --exclude-unreachable-branches \
          --filter ../Source/ \
          --exclude ../Source/Tests/ \
          --exclude ../Source/Tools/ \
          --output coverage.xml
        
        # Generate text summary
        gcovr --exclude-unreachable-branches \
          --filter ../Source/ \
          --exclude ../Source/Tests/ \
          --exclude ../Source/Tools/ \
          > coverage_summary.txt

    - name: Upload to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./build-coverage/coverage.xml
        flags: unittests
        name: HAM Coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const coverageData = fs.readFileSync('build-coverage/coverage_summary.txt', 'utf8');
            const body = `## ðŸ“Š Code Coverage Report
            
            \`\`\`
            ${coverageData}
            \`\`\`
            
            Coverage report generated by GitHub Actions.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } catch (error) {
            console.log('Could not read coverage summary:', error);
          }

    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          build-coverage/coverage.xml
          build-coverage/coverage_filtered.info
          build-coverage/coverage_summary.txt
        retention-days: 30

    - name: Generate HTML report
      run: |
        cd build-coverage
        genhtml coverage_filtered.info \
          --output-directory coverage-html \
          --title "HAM Coverage Report" \
          --show-details \
          --legend

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: build-coverage/coverage-html/
        retention-days: 30

    - name: Coverage Summary
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat build-coverage/coverage_summary.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY